#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('blth-server:server');
var path = require('path');
var http = require('http');
var https = require('https');
var fs = require('fs');
var expressWs = require('express-ws');
var chalk = require('../lib/chalk');

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');
// var httpsPort = normalizePort('3001');
// app.set('port', port);

/**
 * Create HTTP and HTTPS server.
 */
var httpServer = http.createServer(app).listen(3000, function () {
  expressWs(app, httpServer, options);
  console.log(chalk.success("http / ws on 3000 port"));
});

var noHttps = false;
var options = {};
try {
  fs.readdirSync('./https').forEach(function (file) {
    const ext = path.extname(file);
    if (ext === '.crt')
      options.cert = fs.readFileSync('./https/' + file);
    else if (ext === '.key')
      options.key = fs.readFileSync('./https/' + file);
  });
  if (!options.key || !options.cert) throw 'noHttps';
} catch (e) {
  noHttps = true;
}
if (!noHttps) {
  var httpsServer = https.createServer(options, app).listen(3001, function () {
    expressWs(app, httpsServer, options);
    console.log(chalk.success("https / wss on 3001 port"));
  });
} else {
  console.log(chalk.warning('no https'));
}

/**
 * Listen on provided port, on all network interfaces.
 */



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(_error) {
  if (_error.syscall !== 'listen') {
    throw _error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (_error.code) {
    case 'EACCES':
      console.error(chalk.error(bind + ' requires elevated privileges'));
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(chalk.error(bind + ' is already in use'));
      process.exit(1);
      break;
    default:
      throw _error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
